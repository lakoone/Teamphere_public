// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthData {
  email        String  @unique
  passwordHash String?
  refreshToken String? @unique
  userId       Int     @unique
  user         User    @relation(fields: [userId], references: [id])

  @@id([userId])
}

model Friend {
  userId   Int
  friendId Int
  user     User @relation("UserFriends", fields: [userId], references: [id])
  friend   User @relation("UserFriendOf", fields: [friendId], references: [id])

  @@id([userId, friendId])
}

model FriendRequest {
  id         Int    @id @unique @default(autoincrement())
  fromUser   User   @relation("FriendRequestsSent", fields: [fromUserId], references: [id])
  fromUserId Int
  toUser     User   @relation("FriendRequestsReceived", fields: [toUserId], references: [id])
  toUserId   Int
  status     String @default("pending")

  @@unique([fromUserId, toUserId])
}

model User {
  id                     Int               @id @unique @default(autoincrement())
  profile                UserProfile?
  friends                Friend[]          @relation("UserFriends")
  friendOf               Friend[]          @relation("UserFriendOf")
  messages               Message[]
  tasks                  UserTasks[]
  createdTasks           Task[]
  chatParticipants       ChatParticipant[]
  authData               AuthData?         @relation
  friendRequestsSent     FriendRequest[]   @relation("FriendRequestsSent")
  friendRequestsReceived FriendRequest[]   @relation("FriendRequestsReceived")
  Reader                 Reader[]
}

model UserProfile {
  name           String
  tag            String
  tagColor       String
  isPhotoVisible Boolean @default(false)
  bio            String
  img            String
  user           User    @relation(fields: [userId], references: [id])
  userId         Int     @id @unique
}

model Chat {
  id               String            @id @unique @default(uuid())
  name             String
  img              String            @default("")
  isGroup          Boolean
  messages         Message[]
  tasks            Task[]
  chatParticipants ChatParticipant[]
}

model ChatParticipant {
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String
  user   User   @relation(fields: [userId], references: [id])
  userId Int

  @@id([chatId, userId])
}

model Message {
  id        String        @id @unique
  createdAt DateTime
  authorID  Int
  chatID    String
  text      String
  readers   Reader[]
  files     MessageFile[]
  from      User          @relation(fields: [authorID], references: [id])
  to        Chat          @relation(fields: [chatID], references: [id])

  @@index([createdAt])
}

model Reader {
  messageId String
  userId    Int
  message   Message @relation(fields: [messageId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([messageId, userId])
}

model File {
  id                  String                @id @unique
  name                String
  url                 String
  type                String
  size                Int
  messageFiles        MessageFile[]
  taskDescriptionFile TaskDescriptionFile[]
  taskAnswerFile      TaskAnswerFile[]
}

model MessageFile {
  messageId String
  fileId    String
  message   Message @relation(fields: [messageId], references: [id])
  file      File    @relation(fields: [fileId], references: [id])

  @@id([messageId, fileId])
}

model Task {
  id                   String                @id @unique
  title                String
  createdAt            DateTime              @default(now())
  createdByID          Int
  chatID               String
  chat                 Chat                  @relation(fields: [chatID], references: [id])
  deadline             DateTime
  status               String
  taskText             String
  answerText           String?
  changedByID          Int
  lastChangedAt        DateTime              @default(now())
  taskDescriptionFiles TaskDescriptionFile[]
  taskAnswerFiles      TaskAnswerFile[]
  usersAssigned        UserTasks[]
  createdBy            User                  @relation(fields: [createdByID], references: [id])
}

model UserTasks {
  userId Int
  taskId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([userId, taskId])
}

model TaskDescriptionFile {
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String
  file   File   @relation(fields: [fileId], references: [id])
  fileId String

  @@id([taskId, fileId])
}

model TaskAnswerFile {
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String
  file   File   @relation(fields: [fileId], references: [id])
  fileId String

  @@id([taskId, fileId])
}
